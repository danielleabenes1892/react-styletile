{"version":3,"sources":["assets/images/icon-edit.svg","components/counter/counter.js","components/filter_button/filter_button.js","components/dropdown/dropdown.js","components/date_input/date_input.js","components/badge/badge.js","components/btn_icon/btn_icon.js","components/tile/tile.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Counter","props","state","count","this","setState","className","onClick","e","decrement","increment","React","Component","FilterButton","data","map","key","id","selected","keyName","Dropdown","DateInput","type","Badge","style","label","ButtonIcon","src","image","alt","Tile","title","children","filterStatus","shortLabel","longLabel","frequency","App","require","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0904e4d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-edit.f8828e53.svg\";","import React from \"react\";\nimport './counter.css';\n\nclass Counter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          count: 0\n        };\n      }\n    \n      increment() {\n        this.setState({\n          count: this.state.count + 1\n        });\n      };\n      \n      decrement() {\n        if (this.state.count !== 0) {\n            this.setState({\n                count: this.state.count - 1\n            });\n        }\n      };\n\n      render() {\n        return (\n          <div className=\"counter_container\">\n            <button className='dec' onClick={(e) => this.decrement(e)}></button>\n            <span>{this.state.count}</span>\n            <button className='inc' onClick={(e) => this.increment(e)}></button>\n          </div>\n        );\n      }\n}\n\nexport default Counter;","import React from \"react\";\nimport './filter_button.scss';\n\nclass FilterButton extends React.Component {\n      render() {\n        return (\n            <div className=\"filter_button_container\">\n                <ul>\n                    {this.props.data.map(data => (\n                        <li key={data.id} className={this.props.selected === data.id ? 'active' : ''}>{data[this.props.keyName]}</li>\n                    ))}\n                </ul>\n            </div>\n        );\n      }\n}\n\nexport default FilterButton;","import React from \"react\";\nimport './dropdown.scss';\n\nclass Dropdown extends React.Component {\n      render() {\n        if (!this.props.data) return null;\n        return (\n            <div className=\"dropdown_container\">\n                <select>\n                    {this.props.data.map(data => (\n                        <option key={data}>{data}</option>\n                    ))}\n                </select>\n            </div>\n        );\n      }\n}\n\nexport default Dropdown;","import React from \"react\";\nimport './date_input.scss';\n\nclass DateInput extends React.Component {\n      render() {\n        return (\n            <div className=\"date_input_container\">\n                <input type=\"date\"></input>\n            </div>\n        );\n      }\n}\n\nexport default DateInput;","import React from \"react\";\nimport './badge.scss';\n\nclass Badge extends React.Component {\n      render() {\n        return (\n            <div className=\"badge_container\">\n                <label style={this.props.style} className={this.props.type}>{this.props.label}</label>\n            </div>\n        );\n      }\n}\n\nexport default Badge;","import React from \"react\";\nimport './btn_icon.scss';\n\nclass ButtonIcon extends React.Component {\n      render() {\n        return (\n            <div className=\"button_icon_container\">\n                <img src={this.props.image} alt=\"icon\"/>\n                <span>{this.props.label}</span>\n            </div>\n        );\n      }\n}\n\nexport default ButtonIcon;","import React from \"react\";\nimport './tile.scss';\n\nclass Tile extends React.Component {\n      render() {\n        return (\n            <div className=\"tile_container\">\n                <div className=\"title\">{this.props.title}</div>\n                <div className=\"content\">\n                    {this.props.children}\n                </div>\n            </div>\n        );\n      }\n}\n\nexport default Tile;","import React from 'react';\nimport './App.scss';\n\nimport Counter from './components/counter/counter';\nimport FilterButton from './components/filter_button/filter_button';\nimport Dropdown from './components/dropdown/dropdown';\nimport DateInput from './components/date_input/date_input';\nimport Badge from './components/badge/badge';\nimport ButtonIcon from './components/btn_icon/btn_icon';\nimport Tile from './components/tile/tile';\n\nconst filterStatus = [{\n  id: 1,\n  shortLabel: 'Skip',\n  longLabel: 'Skip Next Order'\n}, {\n  id: 2,\n  shortLabel: 'Pause',\n  longLabel: 'Pause Subscription'\n}, {\n  id: 3,\n  shortLabel: 'Cancel',\n  longLabel: 'Cancel Subscription'\n}];\n\nconst frequency = ['Every 2 weeks', 'Everyday'];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>StyleTiles</h1>\n      <div className=\"container\">\n        <h2>Quantity Counter</h2>\n        <Counter></Counter>\n      </div>\n      <div className=\"container status_section\">\n        <h2>Button Status</h2>\n        <div>\n          <p>Display with default selected value</p>\n          <FilterButton \n          data={filterStatus} \n          keyName=\"longLabel\"\n          selected={3}\n          ></FilterButton>\n        </div>\n        <div>\n          <FilterButton data={filterStatus} keyName=\"shortLabel\"></FilterButton>\n        </div>\n      </div>\n      <div className=\"container\">\n        <h2>Dropdown</h2>\n        <Dropdown data={frequency}></Dropdown>\n      </div>\n      <div className=\"container\">\n        <h2>Date Selector</h2>\n        <DateInput></DateInput>\n      </div>\n      <div className=\"container\">\n        <h2>Badge</h2>\n        <Badge \n          label=\"10% Off!\" \n          style={{'backgroundColor': '#000', 'color': 'yellow'}}\n        ></Badge>\n      </div>\n      <div className=\"container\">\n        <h2>Link with icon</h2>\n        <ButtonIcon label=\"Edit\" image={require('./assets/images/icon-edit.svg')}></ButtonIcon>\n        <ButtonIcon label=\"New Payment Method\" image={require('./assets/images/icon-edit.svg')}></ButtonIcon>\n      </div>\n      <div className=\"container tile_section\">\n        <h2>Tile</h2>\n        <Tile title=\"Delivery Details\">\n          <label>Delivery Address</label>\n          <p>Felix Estelle 103/320 Liverpool Street Darlinghurst, NSW, 210</p>\n          <ButtonIcon label=\"Edit\" image={require('./assets/images/icon-edit.svg')}></ButtonIcon>\n          <div className=\"method\">\n            <label>Delivery Method</label>\n            <Dropdown data={frequency}></Dropdown>\n          </div>\n        </Tile>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}